// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	logging "github.com/chelnak/gh-changelog/internal/logging"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Complete provides a mock function with given fields:
func (_m *Logger) Complete() {
	_m.Called()
}

// Errorf provides a mock function with given fields: format, args
func (_m *Logger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetType provides a mock function with given fields:
func (_m *Logger) GetType() logging.LoggerType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 logging.LoggerType
	if rf, ok := ret.Get(0).(func() logging.LoggerType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logging.LoggerType)
	}

	return r0
}

// Infof provides a mock function with given fields: format, args
func (_m *Logger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
