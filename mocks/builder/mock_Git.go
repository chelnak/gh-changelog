// Code generated by mockery v2.40.1. DO NOT EDIT.

package builder

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockGit is an autogenerated mock type for the Git type
type MockGit struct {
	mock.Mock
}

type MockGit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGit) EXPECT() *MockGit_Expecter {
	return &MockGit_Expecter{mock: &_m.Mock}
}

// FetchAll provides a mock function with given fields:
func (_m *MockGit) FetchAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_FetchAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAll'
type MockGit_FetchAll_Call struct {
	*mock.Call
}

// FetchAll is a helper method to define mock.On call
func (_e *MockGit_Expecter) FetchAll() *MockGit_FetchAll_Call {
	return &MockGit_FetchAll_Call{Call: _e.mock.On("FetchAll")}
}

func (_c *MockGit_FetchAll_Call) Run(run func()) *MockGit_FetchAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_FetchAll_Call) Return(_a0 error) *MockGit_FetchAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_FetchAll_Call) RunAndReturn(run func() error) *MockGit_FetchAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentBranch provides a mock function with given fields:
func (_m *MockGit) GetCurrentBranch() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBranch")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetCurrentBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentBranch'
type MockGit_GetCurrentBranch_Call struct {
	*mock.Call
}

// GetCurrentBranch is a helper method to define mock.On call
func (_e *MockGit_Expecter) GetCurrentBranch() *MockGit_GetCurrentBranch_Call {
	return &MockGit_GetCurrentBranch_Call{Call: _e.mock.On("GetCurrentBranch")}
}

func (_c *MockGit_GetCurrentBranch_Call) Run(run func()) *MockGit_GetCurrentBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_GetCurrentBranch_Call) Return(_a0 string, _a1 error) *MockGit_GetCurrentBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetCurrentBranch_Call) RunAndReturn(run func() (string, error)) *MockGit_GetCurrentBranch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDateOfHash provides a mock function with given fields: hash
func (_m *MockGit) GetDateOfHash(hash string) (time.Time, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetDateOfHash")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetDateOfHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDateOfHash'
type MockGit_GetDateOfHash_Call struct {
	*mock.Call
}

// GetDateOfHash is a helper method to define mock.On call
//   - hash string
func (_e *MockGit_Expecter) GetDateOfHash(hash interface{}) *MockGit_GetDateOfHash_Call {
	return &MockGit_GetDateOfHash_Call{Call: _e.mock.On("GetDateOfHash", hash)}
}

func (_c *MockGit_GetDateOfHash_Call) Run(run func(hash string)) *MockGit_GetDateOfHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_GetDateOfHash_Call) Return(_a0 time.Time, _a1 error) *MockGit_GetDateOfHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetDateOfHash_Call) RunAndReturn(run func(string) (time.Time, error)) *MockGit_GetDateOfHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstCommit provides a mock function with given fields:
func (_m *MockGit) GetFirstCommit() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFirstCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetFirstCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstCommit'
type MockGit_GetFirstCommit_Call struct {
	*mock.Call
}

// GetFirstCommit is a helper method to define mock.On call
func (_e *MockGit_Expecter) GetFirstCommit() *MockGit_GetFirstCommit_Call {
	return &MockGit_GetFirstCommit_Call{Call: _e.mock.On("GetFirstCommit")}
}

func (_c *MockGit_GetFirstCommit_Call) Run(run func()) *MockGit_GetFirstCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_GetFirstCommit_Call) Return(_a0 string, _a1 error) *MockGit_GetFirstCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetFirstCommit_Call) RunAndReturn(run func() (string, error)) *MockGit_GetFirstCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastCommit provides a mock function with given fields:
func (_m *MockGit) GetLastCommit() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetLastCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastCommit'
type MockGit_GetLastCommit_Call struct {
	*mock.Call
}

// GetLastCommit is a helper method to define mock.On call
func (_e *MockGit_Expecter) GetLastCommit() *MockGit_GetLastCommit_Call {
	return &MockGit_GetLastCommit_Call{Call: _e.mock.On("GetLastCommit")}
}

func (_c *MockGit_GetLastCommit_Call) Run(run func()) *MockGit_GetLastCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_GetLastCommit_Call) Return(_a0 string, _a1 error) *MockGit_GetLastCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetLastCommit_Call) RunAndReturn(run func() (string, error)) *MockGit_GetLastCommit_Call {
	_c.Call.Return(run)
	return _c
}

// IsAncestorOf provides a mock function with given fields: commit, ancestor
func (_m *MockGit) IsAncestorOf(commit string, ancestor string) (bool, error) {
	ret := _m.Called(commit, ancestor)

	if len(ret) == 0 {
		panic("no return value specified for IsAncestorOf")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(commit, ancestor)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(commit, ancestor)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(commit, ancestor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_IsAncestorOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAncestorOf'
type MockGit_IsAncestorOf_Call struct {
	*mock.Call
}

// IsAncestorOf is a helper method to define mock.On call
//   - commit string
//   - ancestor string
func (_e *MockGit_Expecter) IsAncestorOf(commit interface{}, ancestor interface{}) *MockGit_IsAncestorOf_Call {
	return &MockGit_IsAncestorOf_Call{Call: _e.mock.On("IsAncestorOf", commit, ancestor)}
}

func (_c *MockGit_IsAncestorOf_Call) Run(run func(commit string, ancestor string)) *MockGit_IsAncestorOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGit_IsAncestorOf_Call) Return(_a0 bool, _a1 error) *MockGit_IsAncestorOf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_IsAncestorOf_Call) RunAndReturn(run func(string, string) (bool, error)) *MockGit_IsAncestorOf_Call {
	_c.Call.Return(run)
	return _c
}

// Tags provides a mock function with given fields:
func (_m *MockGit) Tags() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_Tags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tags'
type MockGit_Tags_Call struct {
	*mock.Call
}

// Tags is a helper method to define mock.On call
func (_e *MockGit_Expecter) Tags() *MockGit_Tags_Call {
	return &MockGit_Tags_Call{Call: _e.mock.On("Tags")}
}

func (_c *MockGit_Tags_Call) Run(run func()) *MockGit_Tags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_Tags_Call) Return(_a0 []string, _a1 error) *MockGit_Tags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_Tags_Call) RunAndReturn(run func() ([]string, error)) *MockGit_Tags_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGit creates a new instance of MockGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGit {
	mock := &MockGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
