// Code generated by mockery v2.40.1. DO NOT EDIT.

package builder

import (
	githubclient "github.com/chelnak/gh-changelog/internal/githubclient"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockGitHub is an autogenerated mock type for the GitHub type
type MockGitHub struct {
	mock.Mock
}

type MockGitHub_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitHub) EXPECT() *MockGitHub_Expecter {
	return &MockGitHub_Expecter{mock: &_m.Mock}
}

// GetPullRequestsBetweenDates provides a mock function with given fields: from, to
func (_m *MockGitHub) GetPullRequestsBetweenDates(from time.Time, to time.Time) ([]githubclient.PullRequest, error) {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestsBetweenDates")
	}

	var r0 []githubclient.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]githubclient.PullRequest, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []githubclient.PullRequest); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]githubclient.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitHub_GetPullRequestsBetweenDates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestsBetweenDates'
type MockGitHub_GetPullRequestsBetweenDates_Call struct {
	*mock.Call
}

// GetPullRequestsBetweenDates is a helper method to define mock.On call
//   - from time.Time
//   - to time.Time
func (_e *MockGitHub_Expecter) GetPullRequestsBetweenDates(from interface{}, to interface{}) *MockGitHub_GetPullRequestsBetweenDates_Call {
	return &MockGitHub_GetPullRequestsBetweenDates_Call{Call: _e.mock.On("GetPullRequestsBetweenDates", from, to)}
}

func (_c *MockGitHub_GetPullRequestsBetweenDates_Call) Run(run func(from time.Time, to time.Time)) *MockGitHub_GetPullRequestsBetweenDates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *MockGitHub_GetPullRequestsBetweenDates_Call) Return(_a0 []githubclient.PullRequest, _a1 error) *MockGitHub_GetPullRequestsBetweenDates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitHub_GetPullRequestsBetweenDates_Call) RunAndReturn(run func(time.Time, time.Time) ([]githubclient.PullRequest, error)) *MockGitHub_GetPullRequestsBetweenDates_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoName provides a mock function with given fields:
func (_m *MockGitHub) GetRepoName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGitHub_GetRepoName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoName'
type MockGitHub_GetRepoName_Call struct {
	*mock.Call
}

// GetRepoName is a helper method to define mock.On call
func (_e *MockGitHub_Expecter) GetRepoName() *MockGitHub_GetRepoName_Call {
	return &MockGitHub_GetRepoName_Call{Call: _e.mock.On("GetRepoName")}
}

func (_c *MockGitHub_GetRepoName_Call) Run(run func()) *MockGitHub_GetRepoName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitHub_GetRepoName_Call) Return(_a0 string) *MockGitHub_GetRepoName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitHub_GetRepoName_Call) RunAndReturn(run func() string) *MockGitHub_GetRepoName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoOwner provides a mock function with given fields:
func (_m *MockGitHub) GetRepoOwner() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoOwner")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGitHub_GetRepoOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoOwner'
type MockGitHub_GetRepoOwner_Call struct {
	*mock.Call
}

// GetRepoOwner is a helper method to define mock.On call
func (_e *MockGitHub_Expecter) GetRepoOwner() *MockGitHub_GetRepoOwner_Call {
	return &MockGitHub_GetRepoOwner_Call{Call: _e.mock.On("GetRepoOwner")}
}

func (_c *MockGitHub_GetRepoOwner_Call) Run(run func()) *MockGitHub_GetRepoOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitHub_GetRepoOwner_Call) Return(_a0 string) *MockGitHub_GetRepoOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitHub_GetRepoOwner_Call) RunAndReturn(run func() string) *MockGitHub_GetRepoOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitHub creates a new instance of MockGitHub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHub(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHub {
	mock := &MockGitHub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
