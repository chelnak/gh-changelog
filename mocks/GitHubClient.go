// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	githubclient "github.com/chelnak/gh-changelog/internal/githubclient"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

// GetPullRequestsBetweenDates provides a mock function with given fields: from, to
func (_m *GitHubClient) GetPullRequestsBetweenDates(from time.Time, to time.Time) ([]githubclient.PullRequest, error) {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestsBetweenDates")
	}

	var r0 []githubclient.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]githubclient.PullRequest, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []githubclient.PullRequest); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]githubclient.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepoName provides a mock function with given fields:
func (_m *GitHubClient) GetRepoName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRepoOwner provides a mock function with given fields:
func (_m *GitHubClient) GetRepoOwner() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoOwner")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTags provides a mock function with given fields:
func (_m *GitHubClient) GetTags() ([]githubclient.Tag, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []githubclient.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]githubclient.Tag, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []githubclient.Tag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]githubclient.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
