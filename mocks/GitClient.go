// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// GitClient is an autogenerated mock type for the GitClient type
type GitClient struct {
	mock.Mock
}

// GetDateOfHash provides a mock function with given fields: hash
func (_m *GitClient) GetDateOfHash(hash string) (time.Time, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetDateOfHash")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirstCommit provides a mock function with given fields:
func (_m *GitClient) GetFirstCommit() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFirstCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCommit provides a mock function with given fields:
func (_m *GitClient) GetLastCommit() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastCommit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGitClient creates a new instance of GitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitClient {
	mock := &GitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
