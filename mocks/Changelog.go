// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	entry "github.com/chelnak/gh-changelog/pkg/entry"
	mock "github.com/stretchr/testify/mock"
)

// Changelog is an autogenerated mock type for the Changelog type
type Changelog struct {
	mock.Mock
}

// AddUnreleased provides a mock function with given fields: _a0
func (_m *Changelog) AddUnreleased(_a0 []string) {
	_m.Called(_a0)
}

// GetEntries provides a mock function with given fields:
func (_m *Changelog) GetEntries() []*entry.Entry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEntries")
	}

	var r0 []*entry.Entry
	if rf, ok := ret.Get(0).(func() []*entry.Entry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entry.Entry)
		}
	}

	return r0
}

// GetRepoName provides a mock function with given fields:
func (_m *Changelog) GetRepoName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRepoOwner provides a mock function with given fields:
func (_m *Changelog) GetRepoOwner() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoOwner")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUnreleased provides a mock function with given fields:
func (_m *Changelog) GetUnreleased() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnreleased")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Head provides a mock function with given fields:
func (_m *Changelog) Head() *entry.Entry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *entry.Entry
	if rf, ok := ret.Get(0).(func() *entry.Entry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entry.Entry)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: _a0
func (_m *Changelog) Insert(_a0 entry.Entry) {
	_m.Called(_a0)
}

// Tail provides a mock function with given fields:
func (_m *Changelog) Tail() *entry.Entry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tail")
	}

	var r0 *entry.Entry
	if rf, ok := ret.Get(0).(func() *entry.Entry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entry.Entry)
		}
	}

	return r0
}

// NewChangelog creates a new instance of Changelog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChangelog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Changelog {
	mock := &Changelog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
